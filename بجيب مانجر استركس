gcc -o m m.c -lpthread
./m


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>

#define MAX_IP_LEN 16
#define MAX_PORT_LEN 6

char input_file[] = "targets.txt";
char output_file[] = "results.txt";
int timeout_duration = 3;
int num_threads = 250; // Define the number of threads

pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;

typedef struct {
    int thread_id;
    int num_targets;
} ThreadInfo;

void *checkBanners(void *arg) {
    ThreadInfo *info = (ThreadInfo *)arg;
    int thread_id = info->thread_id;
    int num_targets = info->num_targets;

    char target[MAX_IP_LEN + MAX_PORT_LEN + 2];
    FILE *input, *output;
    char *line = NULL;
    size_t len = 0;
    ssize_t read;

    input = fopen(input_file, "r");
    if (input == NULL) {
        perror("fopen");
        pthread_exit(NULL);
    }

    int targets_per_thread = num_targets / num_threads;
    int start_index = thread_id * targets_per_thread;
    int end_index = start_index + targets_per_thread;

    // Adjust the last thread to handle any remaining targets
    if (thread_id == num_threads - 1) {
        end_index = num_targets;
    }

    for (int i = 0; i < start_index; i++) {
        if (getline(&line, &len, input) == -1) {
            break; // Skip lines that have already been processed by other threads
        }
    }

    while (start_index < end_index && (read = getline(&line, &len, input)) != -1) {
        start_index++;
        line[strcspn(line, "\n")] = '\0';  // Remove newline character if present
        strncpy(target, line, sizeof(target));

        char *ip = strtok(target, ":");
        char *port = strtok(NULL, ":");

        if (ip != NULL && port != NULL) {
            char command[256];
            snprintf(command, sizeof(command), "nc -nn -w%d %s %s 2>&1", timeout_duration, ip, port);

            printf("Thread %d: Checking Telnet banner for: %s:%s\n", thread_id, ip, port); // Display target information

            FILE *fp = popen(command, "r");
            if (fp != NULL) {
                char buffer[4096];
                while (fgets(buffer, sizeof(buffer), fp) != NULL) {
                    if (strstr(buffer, "Asterisk Call Manager") != NULL) {
                        pthread_mutex_lock(&lock);
                        output = fopen(output_file, "a");
                        if (output != NULL) {
                            fprintf(output, "%s:%s\n", ip, port);
                            fclose(output);
                            printf("Thread %d: Found: %s:%s\n", thread_id, ip, port); // Display the target if the banner is found
                        } else {
                            perror("fopen");
                        }
                        pthread_mutex_unlock(&lock);
                        break;
                    }
                }
                pclose(fp);
            } else {
                perror("popen");
            }
        }
    }

    fclose(input);
    if (line) free(line);

    pthread_exit(NULL);
}

int main() {
    pthread_t threads[num_threads];
    int num_targets = 0;

    FILE *input = fopen(input_file, "r");
    if (input == NULL) {
        perror("fopen");
        return 1;
    }

    // Count the number of targets
    char *line = NULL;
    size_t len = 0;
    while (getline(&line, &len, input) != -1) {
        num_targets++;
    }
    fclose(input);

    // Reset file position
    input = fopen(input_file, "r");
    if (input == NULL) {
        perror("fopen");
        return 1;
    }

    // Create threads to check banners
    for (int i = 0; i < num_threads; i++) {
        ThreadInfo *info = malloc(sizeof(ThreadInfo));
        info->thread_id = i;
        info->num_targets = num_targets;

        if (pthread_create(&threads[i], NULL, checkBanners, (void *)info) != 0) {
            perror("pthread_create");
            return 1;
        }
    }

    // Wait for threads to finish
    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

    if (line) free(line);

    return 0;
}
