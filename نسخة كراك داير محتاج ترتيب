sudo apt update
sudo apt install gcc libcurl4-openssl-dev

gcc scanner.c -o scanner -lcurl -lpthread
./scanner


==================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>
#include <pthread.h>
#include <unistd.h>

#define TARGETS_FILE "targets.txt"
#define GUESS_FILE "guess_file.txt"
#define CHUNK_SIZE 5
#define MAX_LINE_LENGTH 1024
#define THREAD_COUNT 1000
#define REQUEST_DELAY_MICROSECONDS 3000000

struct ThreadData {
    char **targets;
    int target_count;
    char **guesses;
    int guess_count;
    int thread_id;
};

long defaultResponse = 0;

size_t write_callback(void *contents, size_t size, size_t nmemb, void *userp);
size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream);
char **read_file(const char *filename, int *line_count);
void perform_request(const char *url, const char *path);
void *thread_function(void *data);
int getVerifiedResponse(const char *url, const char *path, long *status, size_t *content_length, int *dir);

int main() {
    int target_count, guess_count;
    char **targets = read_file(TARGETS_FILE, &target_count);
    char **guesses = read_file(GUESS_FILE, &guess_count);

    pthread_t threads[THREAD_COUNT];
    struct ThreadData thread_data[THREAD_COUNT];

    for (int i = 0; i < THREAD_COUNT; i++) {
        thread_data[i].targets = targets;
        thread_data[i].target_count = target_count;
        thread_data[i].guesses = guesses;
        thread_data[i].guess_count = guess_count;
        thread_data[i].thread_id = i;

        pthread_create(&threads[i], NULL, thread_function, &thread_data[i]);
    }

    for (int i = 0; i < THREAD_COUNT; i++) {
        pthread_join(threads[i], NULL);
    }

    for (int i = 0; i < target_count; i++) {
        free(targets[i]);
    }

    for (int i = 0; i < guess_count; i++) {
        free(guesses[i]);
    }

    free(targets);
    free(guesses);

    return 0;
}

char **read_file(const char *filename, int *line_count) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        fprintf(stderr, "Failed to open file: %s\n", filename);
        exit(EXIT_FAILURE);
    }

    char **lines = NULL;
    char line[MAX_LINE_LENGTH];
    *line_count = 0;

    while (fgets(line, sizeof(line), file)) {
        line[strcspn(line, "\n")] = 0;
        lines = realloc(lines, (*line_count + 1) * sizeof(char *));
        if (!lines) {
            fprintf(stderr, "Memory allocation failed\n");
            exit(EXIT_FAILURE);
        }
        lines[*line_count] = strdup(line);
        (*line_count)++;
    }

    fclose(file);
    return lines;
}

size_t write_callback(void *contents, size_t size, size_t nmemb, void *userp) {
    size_t total_size = size * nmemb;
    fwrite(contents, size, nmemb, (FILE *)userp);
    return total_size;
}

size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream) {
    size_t written = fwrite(ptr, size, nmemb, (FILE *)stream);
    return written;
}

void perform_request(const char *url, const char *path) {
    long status;
    size_t content_length;
    int dir = 0;
    if (getVerifiedResponse(url, path, &status, &content_length, &dir) != 0) {
        fprintf(stderr, "Failed to get verified response for URL: %s/%s\n", url, path);
        return;
    }

    printf("URL: %s/%s, Status: %ld, Content Length: %zu, Directory: %s\n", url, path, status, content_length, dir ? "Yes" : "No");

    if (dir) {
        FILE *file = fopen("dir.txt", "a");
        if (file) {
            fprintf(file, "%s/%s\n", url, path);
            fclose(file);
        } else {
            fprintf(stderr, "Failed to open dir.txt for writing\n");
        }
    }

    if (status == 200 || status == 301 || status == 403 || status == 401) {
        char filename[MAX_LINE_LENGTH];
        snprintf(filename, sizeof(filename), "%ld.txt", status);

        FILE *file = fopen(filename, "a");
        if (file) {
            fprintf(file, "%s/%s\n", url, path);
            fclose(file);
        } else {
            fprintf(stderr, "Failed to open file for writing: %s\n", filename);
        }
    }
}

void *thread_function(void *data) {
    struct ThreadData *thread_data = (struct ThreadData *)data;
    int targets_per_thread = thread_data->target_count / THREAD_COUNT;
    int start_index = thread_data->thread_id * targets_per_thread;
    int end_index = (thread_data->thread_id == THREAD_COUNT - 1) ? thread_data->target_count : start_index + targets_per_thread;

    for (int i = start_index; i < end_index; i++) {
        for (int j = 0; j < thread_data->guess_count; j += CHUNK_SIZE) {
            for (int k = 0; k < CHUNK_SIZE && j + k < thread_data->guess_count; k++) {
                perform_request(thread_data->targets[i], thread_data->guesses[j + k]);
            }
        }
    }

    pthread_exit(NULL);
}

int getVerifiedResponse(const char *url, const char *path, long *status, size_t *content_length, int *dir) {
    CURL *curl = curl_easy_init();
    if (!curl) {
        fprintf(stderr, "Failed to initialize CURL\n");
        return -1;
    }

    char full_url[MAX_LINE_LENGTH];
    snprintf(full_url, sizeof(full_url), "%s/%s", url, path);

    struct curl_slist *headers = NULL;
    headers = curl_slist_append(headers, "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537");

    curl_easy_setopt(curl, CURLOPT_URL, full_url);
    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 2L);
    curl_easy_setopt(curl, CURLOPT_NOBODY, 1L);
    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 5L);

    if (dir) {
        FILE *bodyfile = tmpfile();
        if (bodyfile) {
            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);
            curl_easy_setopt(curl, CURLOPT_WRITEDATA, bodyfile);
            curl_easy_setopt(curl, CURLOPT_NOBODY, 0L);
            CURLcode res = curl_easy_perform(curl);
            if (res != CURLE_OK) {
                fclose(bodyfile);
                fprintf(stderr, "Request failed: %s\n", curl_easy_strerror(res));
                curl_slist_free_all(headers);
                curl_easy_cleanup(curl);
                return -1;
            }

            rewind(bodyfile);
            char buffer[MAX_LINE_LENGTH];
            while (fgets(buffer, sizeof(buffer), bodyfile)) {
                if (strstr(buffer, "Index of /") || strstr(buffer, "Directory listing for /")) {
                    *dir = 1;
                    break;
                }
            }
            fclose(bodyfile);
        } else {
            fprintf(stderr, "Failed to open temporary file\n");
        }
    } else {
        CURLcode res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            fprintf(stderr, "Request failed: %s\n", curl_easy_strerror(res));
            curl_slist_free_all(headers);
            curl_easy_cleanup(curl);
            return -1;
        }
    }

    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, status);
    curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD_T, content_length);

    curl_slist_free_all(headers);
    usleep(REQUEST_DELAY_MICROSECONDS);
    curl_easy_cleanup(curl);

    return 0;
}
