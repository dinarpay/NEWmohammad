gcc -o Index Index.c -lcurl -lpthread

./Index

===============

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <curl/curl.h>

#define LINE_LENGTH 256
#define URL_LENGTH (2 * LINE_LENGTH + 10)
#define TIMEOUT 3L
#define MAX_THREADS 500
#define PATHS_PER_BATCH 5

typedef struct {
    char target[LINE_LENGTH];
    char paths[PATHS_PER_BATCH][LINE_LENGTH];
    int path_count;
} CrawlArgs;

size_t write_callback(void *contents, size_t size, size_t nmemb, void *userp) {
    if (strstr((char *)contents, "Index of /") != NULL || strstr((char *)contents, "Directory listing for /") != NULL) {
        strcat(userp, "found");
    }
    return size * nmemb;
}

void *crawl_target(void *args) {
    CrawlArgs *crawl_args = (CrawlArgs *)args;

    for (int i = 0; i < crawl_args->path_count; i++) {
        char url[URL_LENGTH];
        snprintf(url, sizeof(url), "%s/%s/", crawl_args->target, crawl_args->paths[i]);

        char result[10] = "";
        CURL *curl = curl_easy_init();
        if (curl) {
            curl_easy_setopt(curl, CURLOPT_URL, url);
            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
            curl_easy_setopt(curl, CURLOPT_WRITEDATA, result);
            curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
            curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
            curl_easy_setopt(curl, CURLOPT_TIMEOUT, TIMEOUT);

            CURLcode res = curl_easy_perform(curl);
            curl_easy_cleanup(curl);

            if (res == CURLE_OK && strstr(result, "found") != NULL) {
                printf("Target URL: %s\n", url);
                FILE *results_file = fopen("results.txt", "a");
                fprintf(results_file, "%s\n", url);
                fclose(results_file);
            }
        }
    }

    free(args);
    return NULL;
}

int main() {
    char target[LINE_LENGTH];
    char path[LINE_LENGTH];
    int total_targets = 0;
    char paths_buffer[PATHS_PER_BATCH][LINE_LENGTH];
    int paths_buffer_count = 0;

    FILE *targets_file = fopen("targets.txt", "r");
    FILE *paths_file = fopen("paths.txt", "r");

    if (targets_file == NULL) {
        fprintf(stderr, "Error opening targets.txt\n");
        return 1;
    }

    if (paths_file == NULL) {
        fprintf(stderr, "Error opening paths.txt\n");
        return 1;
    }

    while (fgets(target, sizeof(target), targets_file)) {
        strtok(target, "\n");
        total_targets++;

        rewind(paths_file);
        paths_buffer_count = 0;

        while (fgets(path, sizeof(path), paths_file)) {
            strtok(path, "\n");
            strcpy(paths_buffer[paths_buffer_count], path);
            paths_buffer_count++;

            if (paths_buffer_count == PATHS_PER_BATCH) {
                CrawlArgs *args = malloc(sizeof(CrawlArgs));
                strcpy(args->target, target);
                args->path_count = PATHS_PER_BATCH;
                for (int i = 0; i < PATHS_PER_BATCH; i++) {
                    strcpy(args->paths[i], paths_buffer[i]);
                }

                pthread_t thread;
                pthread_create(&thread, NULL, crawl_target, args);
                pthread_join(thread, NULL);  // Wait for the thread to finish
                paths_buffer_count = 0;      // Reset the buffer count
            }
        }

        // Handle the remaining paths if any
        if (paths_buffer_count > 0) {
            CrawlArgs *args = malloc(sizeof(CrawlArgs));
            strcpy(args->target, target);
            args->path_count = paths_buffer_count;
            for (int i = 0; i < paths_buffer_count; i++) {
                strcpy(args->paths[i], paths_buffer[i]);
            }

            pthread_t thread;
            pthread_create(&thread, NULL, crawl_target, args);
            pthread_join(thread, NULL);
        }
    }

    fclose(targets_file);
    fclose(paths_file);

    printf("Finished\n");
    return 0;
}
