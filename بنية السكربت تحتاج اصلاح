#include <pjsua-lib/pjsua.h>
#include <stdio.h>
#include <string.h>
#include <pthread.h>
#include <uv.h>

#define THIS_THREAD_IS_NOT_A_PJ_THREAD (!pj_thread_is_registered())

typedef struct {
    char ip[100];
    int port;
    char user[50];
    char pass[50];
    char protocol[5];
} Target;

typedef struct {
    Target target;
    char prefix[10];
    char phoneNumber[20];
    uv_timer_t timer;
} CallData;

Target targets[1000];
char prefixes[100][10];
char phoneNumbers[1000][20];
int num_targets = 0;
int num_prefixes = 0;
int num_phoneNumbers = 0;

pj_mutex_t *mutex;

void ensure_thread_registered(const char *name) {
    if (!pj_thread_is_registered()) {
        pj_thread_desc initdesc;
        memset(&initdesc, 0, sizeof(initdesc));
        pj_thread_t *this_thread;
        pj_thread_register(name, initdesc, &this_thread);
    }
}

void readTargets(const char* filename) {
    FILE* file = fopen(filename, "r");
    char line[200];
    while (fgets(line, sizeof(line), file)) {
        sscanf(line, "%[^:]:%d %s %s %s", targets[num_targets].ip, &targets[num_targets].port, targets[num_targets].user, targets[num_targets].pass, targets[num_targets].protocol);
        num_targets++;
    }
    fclose(file);
}

void readPrefixes(const char* filename) {
    FILE* file = fopen(filename, "r");
    char line[200];
    while (fgets(line, sizeof(line), file)) {
        sscanf(line, "%s", prefixes[num_prefixes]);
        num_prefixes++;
    }
    fclose(file);
}

void readPhoneNumbers(const char* filename) {
    FILE* file = fopen(filename, "r");
    char line[200];
    while (fgets(line, sizeof(line), file)) {
        sscanf(line, "%s", phoneNumbers[num_phoneNumbers]);
        num_phoneNumbers++;
    }
    fclose(file);
}

void timer_callback(uv_timer_t* timer) {
    ensure_thread_registered("timer_callback");
    CallData* call_data = (CallData*) timer->data;
    pjsua_call_hangup_all();
    free(call_data);
}

pjsua_acc_id makeCall(Target target, const char* prefix, const char* phoneNumber) {
    ensure_thread_registered("makeCall");
    char sip_uri[300];
    snprintf(sip_uri, sizeof(sip_uri), "sip:%s:%s@%s:%d;transport=%s", target.user, target.pass, target.ip, target.port, target.protocol);

    pjsua_call_id call_id;
    pj_str_t uri = pj_str(sip_uri);
    pjsua_call_make_call(pjsua_acc_get_default(), &uri, 0, NULL, NULL, &call_id);
    
    return call_id;
}

void on_call_state(pjsua_call_id call_id, pjsip_event *e) {
    ensure_thread_registered("on_call_state");
    pjsua_call_info ci;
    pjsua_call_get_info(call_id, &ci);
    char response[50];
    snprintf(response, sizeof(response), "%d %.*s", ci.last_status, (int)ci.last_status_text.slen, ci.last_status_text.ptr);
    FILE *file = fopen(response, "a");
    if (file) {
        fprintf(file, "%s\n", response);
        fclose(file);
    }
    uv_timer_stop(&((CallData*) e->body.tsx_state.src.rdata->pkt_info.packet)->timer);
}

void *thread_func(void *arg) {
    ensure_thread_registered("thread_func");
    CallData* call_data = (CallData*) malloc(sizeof(CallData));
    call_data->target = *(Target *)arg;
    for (int i = 0; i < num_prefixes; i++) {
        for (int j = 0; j < num_phoneNumbers; j++) {
            strcpy(call_data->prefix, prefixes[i]);
            strcpy(call_data->phoneNumber, phoneNumbers[j]);
            uv_timer_init(uv_default_loop(), &call_data->timer);
            call_data->timer.data = call_data;
            uv_timer_start(&call_data->timer, timer_callback, 20000, 0);
            
            if (mutex) {
                pj_mutex_lock(mutex);
                makeCall(call_data->target, call_data->prefix, call_data->phoneNumber);
                pj_mutex_unlock(mutex);
            } else {
                printf("Mutex is not initialized!\n");
                exit(1);
            }
            
            uv_run(uv_default_loop(), UV_RUN_DEFAULT);
        }
    }
    free(call_data);
    return NULL;
}

int main(int argc, char *argv[]) {
    if (argc < 6) {
        printf("Usage: %s <targets_file> <prefixes_file> <phone_numbers_file> <protocol> <threads_count>\n", argv[0]);
        return -1;
    }

    readTargets(argv[1]);
    readPrefixes(argv[2]);
    readPhoneNumbers(argv[3]);

    pjsip_transport_type_e transport_type;
    if (strcmp(argv[4], "UDP") == 0 || strcmp(argv[4], "udp") == 0) {
        transport_type = PJSIP_TRANSPORT_UDP;
    } else if (strcmp(argv[4], "TCP") == 0 || strcmp(argv[4], "tcp") == 0) {
        transport_type = PJSIP_TRANSPORT_TCP;
    } else if (strcmp(argv[4], "TLS") == 0 || strcmp(argv[4], "tls") == 0) {
        transport_type = PJSIP_TRANSPORT_TLS;
    } else {
        printf("Invalid protocol: %s\n", argv[4]);
        return -1;
    }

    int threads_count = atoi(argv[5]);
    if (threads_count <= 0 || threads_count > 1000) {
        printf("Invalid threads count: %s\n", argv[5]);
        return -1;
    }

    pjsua_config cfg;
    pjsua_logging_config log_cfg;
    pjsua_config_default(&cfg);
    pjsua_logging_config_default(&log_cfg);
    cfg.cb.on_call_state = &on_call_state;
    ensure_thread_registered("main");
    pjsua_create();
    pjsua_init(&cfg, &log_cfg, NULL);
    pjsua_transport_config tcfg;
    pjsua_transport_config_default(&tcfg);
    pjsua_transport_create(transport_type, &tcfg, NULL);
    pjsua_start();
    pjsua_set_null_snd_dev();

    pjsua_acc_config acc_cfg;
    pjsua_acc_config_default(&acc_cfg);
    acc_cfg.id = pj_str("sip:anonymous@localhost");
    acc_cfg.reg_uri = pj_str("");
    acc_cfg.cred_count = 0;

    pjsua_acc_id acc_id;
    pjsua_acc_add(&acc_cfg, PJ_FALSE, &acc_id);

    pj_pool_t *pool = pjsua_pool_create("pjsip_mutex_pool", 512, 512);
    if (pj_mutex_create_simple(pool, "pjsip_mutex", &mutex) != PJ_SUCCESS) {
        printf("Failed to create mutex!\n");
        exit(1);
    }
    pthread_t threads[threads_count];
    for (int i = 0; i < threads_count; i++) {
        pthread_create(&threads[i], NULL, thread_func, &targets[i % num_targets]);
    }
    for (int i = 0; i < threads_count; i++) {
        pthread_join(threads[i], NULL);
    }

    pjsua_destroy();

    pj_mutex_destroy(mutex);
    pj_pool_release(pool);

    return 0;
}
